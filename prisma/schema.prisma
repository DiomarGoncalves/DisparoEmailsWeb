// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ou "mysql" conforme o servi√ßo escolhido
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  senders   Sender[]
  clients   Client[]
  templates Template[]
  campaigns Campaign[]
  logs      Log[]
  schedules Schedule[]

  @@map("users")
}

model Sender {
  id       String @id @default(cuid())
  name     String
  email    String
  host     String
  port     Int
  secure   Boolean @default(true)
  username String
  password String
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  campaigns Campaign[]
  schedules Schedule[]

  @@map("senders")
}

model Client {
  id    String @id @default(cuid())
  name  String
  email String
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  campaignClients CampaignClient[]

  @@unique([email, userId])
  @@map("clients")
}

model Template {
  id      String @id @default(cuid())
  name    String
  subject String
  content String
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  campaigns Campaign[]
  schedules Schedule[]

  @@map("templates")
}

model Campaign {
  id     String @id @default(cuid())
  name   String
  status String @default("draft") // draft, sending, completed, failed
  
  senderId   String
  sender     Sender @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  campaignClients CampaignClient[]
  attachments     Attachment[]

  @@map("campaigns")
}

model CampaignClient {
  id         String @id @default(cuid())
  status     String @default("pending") // pending, sent, failed
  sentAt     DateTime?
  errorMsg   String?
  
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([campaignId, clientId])
  @@map("campaign_clients")
}

model Schedule {
  id          String  @id @default(cuid())
  name        String
  isActive    Boolean @default(true)
  cronPattern String  // e.g., "0 9 * * 1" for every Monday at 9 AM
  
  senderId   String
  sender     Sender @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  lastRun   DateTime?
  nextRun   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("schedules")
}

model Attachment {
  id         String @id @default(cuid())
  filename   String
  originalName String
  mimeType   String
  size       Int
  path       String
  
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@map("attachments")
}

model Log {
  id      String @id @default(cuid())
  action  String // login, logout, send_email, create_client, etc.
  details String?
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@map("logs")
}